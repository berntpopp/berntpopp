query_phenotypes
runQuery(im, query_phenotypes)
mouse_phenotypes <- runQuery(im, query_phenotypes)
View(mouse_phenotypes )
template = getTemplates(im)
head(template)
library(httr)
library(tidyverse)
library(jsonlite)
get_median_tissue_expression <- function(gencode_ids) {
# Prepare the API URL
base_url <- "https://gtexportal.org/api/v2/expression/medianGeneExpression?"
ids_query <- paste0("gencodeId=", gencode_ids, collapse = "&")
full_url <- paste0(base_url, ids_query)
# Make the API request
response <- GET(full_url)
# Check if request was successful
if (http_status(response)$category != "Success") {
stop("Failed to retrieve data from GTEx API.")
}
# Parse the JSON response
parsed_data <- fromJSON(content(response, "text"))
# Convert the parsed JSON data to a tibble
expression_tibble <- as_tibble(parsed_data$data)
return(expression_tibble)
}
gencode_ids <- c("ENSG00000008710.19", "ENSG00000118762.7")
expression_data <- get_median_tissue_expression(gencode_ids)
expression_data
View(expression_data )
#' Get Median Tissue Expression Levels from GTEx Data
#'
#' This function takes an Ensembl gene identifier and a data frame containing GTEx data,
#' and returns the median tissue expression levels for that gene.
#'
#' @param ensemble_id A character string representing the Ensembl gene identifier.
#' @param gtex_data A data frame containing GTEx data with columns for 'ensemble_id', 'tissue', and 'expression'.
#'
#' @return A data frame with two columns:
#'         - 'tissue': The tissue types.
#'         - 'median_expression': The median expression levels for the given gene in each tissue.
#'
#' @examples
#' \dontrun{
#'   gtex_data <- read.csv("path/to/gtex_data.csv")
#'   median_expression <- get_median_tissue_expression("ENSG00000141510", gtex_data)
#'   print(median_expression)
#' }
#'
#' @export
get_median_tissue_expression <- function(ensemble_id, gtex_data) {
# Filter data for the given Ensembl ID
gene_data <- subset(gtex_data, ensemble_id == ensemble_id)
# Check if gene_data is empty
if (nrow(gene_data) == 0) {
stop(paste("No data available for the Ensembl ID:", ensemble_id))
}
# Calculate median expression levels for each tissue
median_expression <- aggregate(expression ~ tissue, data = gene_data, FUN = median)
return(median_expression)
}
gencode_ids <- c("ENSG00000008710.19", "ENSG00000118762.7")
expression_data <- get_median_tissue_expression(gencode_ids)
#' Get Median Tissue Expression Levels from GTEx API
#'
#' This function takes a list of GENCODE gene identifiers as input,
#' makes a GET request to the GTEx API, and returns the median tissue
#' expression levels as a tibble.
#'
#' @param gencode_ids A character vector representing the GENCODE gene identifiers.
#'
#' @return A tibble with columns containing the median tissue expression data
#'         returned by the GTEx API.
#'
#' @examples
#' \dontrun{
#'   median_expression <- get_median_tissue_expression(c("ENSG00000141510", "ENSG00000223972"))
#'   print(median_expression)
#' }
#'
#' @export
get_median_tissue_expression <- function(gencode_ids) {
# Prepare the API URL
base_url <- "https://gtexportal.org/api/v2/expression/medianGeneExpression?"
ids_query <- paste0("gencodeId=", gencode_ids, collapse = "&")
full_url <- paste0(base_url, ids_query)
# Make the API request
response <- GET(full_url)
# Check if request was successful
if (http_status(response)$category != "Success") {
stop("Failed to retrieve data from GTEx API.")
}
# Parse the JSON response
parsed_data <- fromJSON(content(response, "text"))
# Convert the parsed JSON data to a tibble
expression_tibble <- as_tibble(parsed_data$data)
return(expression_tibble)
}
gencode_ids <- c("ENSG00000008710.19", "ENSG00000118762.7")
expression_data <- get_median_tissue_expression(gencode_ids)
#' Get Median Tissue Expression Levels from GTEx API
#'
#' This function takes a list of GENCODE gene identifiers as input,
#' makes a GET request to the GTEx API, and returns the median tissue
#' expression levels as a tibble.
#'
#' @param gencode_ids A character vector representing the GENCODE gene identifiers.
#'
#' @return A tibble with columns containing the median tissue expression data
#'         returned by the GTEx API.
#'
#' @examples
#' \dontrun{
#'   median_expression <- get_median_tissue_expression(c("ENSG00000141510", "ENSG00000223972"))
#'   print(median_expression)
#' }
#'
#' @export
get_median_tissue_expression <- function(gencode_ids) {
# Prepare the API URL
base_url <- "https://gtexportal.org/api/v2/expression/medianGeneExpression?"
ids_query <- paste0("gencodeId=", gencode_ids, collapse = "&")
full_url <- paste0(base_url, ids_query)
# Make the API request
response <- GET(full_url)
# Check if request was successful
if (http_status(response)$category != "Success") {
stop("Failed to retrieve data from GTEx API.")
}
# Parse the JSON response
parsed_data <- fromJSON(content(response, "text", encoding = "UTF-8"))
# Convert the parsed JSON data to a tibble
expression_tibble <- as_tibble(parsed_data$data)
return(expression_tibble)
}
gencode_ids <- c("ENSG00000008710.19", "ENSG00000118762.7")
expression_data <- get_median_tissue_expression(gencode_ids)
#' Fetch Median Tissue Expression Levels from GTEx API for Multiple Genes
#'
#' This function takes a character vector of GENCODE gene identifiers as input,
#' splits it into appropriate chunks to fit the API input size limitations,
#' makes a GET request for each chunk of gene identifiers to the GTEx API,
#' and returns the median tissue expression levels as a tibble.
#'
#' @param gencode_ids A character vector representing the GENCODE gene identifiers.
#' @param max_ids_per_request An integer specifying the maximum number of identifiers
#'        that can be queried in a single API request. Default is 50.
#'
#' @return A tibble with rows for each gene and columns containing the median tissue
#'         expression data returned by the GTEx API.
#'
#' @examples
#' \dontrun{
#'   median_expression <- get_multiple_median_tissue_expression(c("ENSG00000141510", "ENSG00000223972"))
#'   print(median_expression)
#' }
#' \dontrun{
#'   median_expression <- get_multiple_median_tissue_expression(c("ENSG00000141510", "ENSG00000223972"), max_ids_per_request = 25)
#'   print(median_expression)
#' }
#'
#' @export
get_multiple_median_tissue_expression <- function(gencode_ids, max_ids_per_request = 50) {
# Split the gencode_ids into chunks that fit within the API's limitations
id_chunks <- split(gencode_ids, ceiling(seq_along(gencode_ids) / max_ids_per_request))
# Use purrr::map to iterate over id_chunks and get a list of tibbles
list_of_tibbles <- purrr::map(id_chunks, get_median_tissue_expression)
# Use purrr::reduce to bind all tibbles into a single tibble
aggregated_data <- purrr::reduce(list_of_tibbles, dplyr::bind_rows)
# Return the aggregated tibble
return(aggregated_data)
}
get_multiple_median_tissue_expression(c("ENSG00000141510", "ENSG00000223972"))
get_multiple_median_tissue_expression("ENSG00000008710.19", "ENSG00000118762.7"))
get_multiple_median_tissue_expression(c("ENSG00000008710.19", "ENSG00000118762.7"))
file.edit('~/.Renviron')
############################################
## load libraries
library(tidyverse)  ## needed for general table operations
library(biomaRt)    ## needed to get gene coordinates
library(STRINGdb)   ## needed to compute StringDB identifiers
library("R.utils")  ## gzip downloaded and result files
library(readxl)     ## needed to read xlsx file
library(config)     ## needed for config loading
library(janitor)    ## needed for cleaning column names
############################################
mart_hg19 <- useMart("ensembl", host="grch37.ensembl.org")
mart_hg19 <- useDataset("hsapiens_gene_ensembl", mart_hg19)
mart_hg38 <- useMart("ensembl", host="ensembl.org")
mart_hg38 <- useDataset("hsapiens_gene_ensembl", mart_hg38)
searchAttributes(mart = mart_hg38, pattern = "ensem")
attributes <- c("ensembl_gene_id_version")
filters <- c("ensembl_gene_id")
attributes <- c("ensembl_gene_id_version")
filters <- c("ensembl_gene_id")
values <- list(ensembl_gene_id = "ENSG00000008710")
gene_coordinates_hg19 <- getBM(attributes=attributes, filters=filters, values=values, mart=mart) %>%
group_by(hgnc_symbol) %>%
summarise(hgnc_symbol = max(hgnc_symbol), chromosome_name = max(chromosome_name), start_position = max(start_position), end_position = max(end_position)) %>%
mutate(bed_format = paste0("chr", chromosome_name, ":", start_position, "-", end_position)) %>%
dplyr::select(hgnc_symbol, bed_format)
mart <- useMart("ensembl", host = "ensembl.org")
mart <- useDataset("hsapiens_gene_ensembl", mart_hg38)
attributes <- c("ensembl_gene_id_version")
filters <- c("ensembl_gene_id")
values <- list(ensembl_gene_id = "ENSG00000008710")
gene_coordinates_hg19 <- getBM(attributes=attributes, filters=filters, values=values, mart=mart) %>%
group_by(hgnc_symbol) %>%
summarise(hgnc_symbol = max(hgnc_symbol), chromosome_name = max(chromosome_name), start_position = max(start_position), end_position = max(end_position)) %>%
mutate(bed_format = paste0("chr", chromosome_name, ":", start_position, "-", end_position)) %>%
dplyr::select(hgnc_symbol, bed_format)
getBM(attributes=attributes, filters=filters, values=values, mart=mart)
attributes <- c("ensembl_gene_id_version")
filters <- c("hgnc_symbol")
values <- list(hgnc_symbol = "PKD1")
getBM(attributes=attributes, filters=filters, values=values, mart=mart)
library(biomaRt)
library(dplyr)
library(tibble)
gene_id_version_from_ensembl <- function(ensembl_id, reference = "hg19") {
ensembl_id_list <- enframe(ensembl_id, name = NULL, value = "ensembl_gene_id")
# Define mart
if (reference == "hg19") {
mart <- useMart("ensembl", dataset = "hsapiens_gene_ensembl", host = "grch37.ensembl.org")
} else {
mart <- useMart("ensembl", dataset = "hsapiens_gene_ensembl", host = "ensembl.org")
}
# Define the attributes and filters
attributes <- c("ensembl_gene_id", "ensembl_gene_id_version")
filters <- "ensembl_gene_id"
# Retrieve the data
gene_id_version <- getBM(attributes = attributes, filters = filters, values = ensembl_id_list$ensembl_gene_id, mart = mart)
# Join the data back to the input list to ensure all input IDs are in the output
ensembl_id_list_return <- ensembl_id_list %>%
left_join(gene_id_version, by = "ensembl_gene_id")
return(ensembl_id_list_return)
}
# Example usage
ensembl_id <- c("ENSG00000123456", "ENSG00000123457", "ENSG00000123458")
gene_id_version_from_ensembl(ensembl_id, reference = "hg19")
gene_id_version_from_ensembl(ensembl_id, reference = "hg19")
# define mart
mart_hg19 <- useMart("ensembl", host="grch37.ensembl.org")
mart_hg19 <- useDataset("hsapiens_gene_ensembl", mart_hg19)
mart_hg38 <- useMart("ensembl", host="ensembl.org")
mart_hg38 <- useDataset("hsapiens_gene_ensembl", mart_hg38)
if (reference == "hg19") {
mart <- useMart("ensembl", host = "grch37.ensembl.org")
mart <- useDataset("hsapiens_gene_ensembl", mart_hg19)
} else {
mart <- useMart("ensembl", host = "ensembl.org")
mart <- useDataset("hsapiens_gene_ensembl", mart_hg38)
}
mart <- useMart("ensembl", host = "ensembl.org")
mart <- useDataset("hsapiens_gene_ensembl", mart_hg38)
attributes <- c("ensembl_gene_id", "ensembl_gene_id_version")
filters <- "ensembl_gene_id"
ensembl_id <- c("ENSG00000123456", "ENSG00000123457", "ENSG00000123458")
ensembl_id_list <- enframe(ensembl_id, name = NULL, value = "ensembl_gene_id")
getBM(attributes = attributes, filters = filters, values = ensembl_id_list$ensembl_gene_id, mart = mart)
ensembl_id_list$ensembl_gene_id
ensembl_id_list
gene_symbol_list
ensembl_id_list <- as_tibble(ensembl_id) %>%
dplyr::select(ensembl_gene_id = value)
ensembl_id_list
values <- list(ensembl_gene_id = ensembl_id_list$ensembl_gene_id)
getBM(attributes = attributes, filters = filters, values = ensembl_id_list$ensembl_gene_id, mart = mart)
# Example usage
ensembl_id <- c("ENSG00000203782", "ENSG00000008710.19")
gene_id_version_from_ensembl(ensembl_id, reference = "hg19")
ensembl_id <- c("ENSG00000203782", "ENSG00000008710")
gene_id_version_from_ensembl(ensembl_id, reference = "hg19")
gene_id_version_from_ensembl <- function(ensembl_id, reference = "hg19") {
ensembl_id_list <- enframe(ensembl_id, name = NULL, value = "ensembl_gene_id")
# Define mart
if (reference == "hg19") {
mart <- useMart("ensembl", dataset = "hsapiens_gene_ensembl", host = "grch37.ensembl.org")
} else {
mart <- useMart("ensembl", dataset = "hsapiens_gene_ensembl", host = "ensembl.org")
}
# Define the attributes and filters
attributes <- c("ensembl_gene_id", "ensembl_gene_id_version")
filters <- "ensembl_gene_id"
# Retrieve the data
gene_id_version <- getBM(attributes = attributes, filters = filters, values = ensembl_id_list$ensembl_gene_id, mart = mart)
# Join the data back to the input list to ensure all input IDs are in the output
ensembl_id_list_return <- ensembl_id_list %>%
left_join(gene_id_version, by = "ensembl_gene_id")
return(ensembl_id_list_return)
}
ensembl_id <- c("ENSG00000203782", "ENSG00000008710")
gene_id_version_from_ensembl(ensembl_id, reference = "hg19")
#' Retrieve Ensembl gene ID versions from Ensembl gene IDs
#'
#' This function retrieves the Ensembl gene ID versions for the given Ensembl
#' gene IDs. The ID versions are obtained from the specified reference genome.
#'
#' @param ensembl_id A vector or tibble containing the Ensembl gene IDs.
#' @param reference The reference genome to use (default: "hg19").
#'
#' @return A tibble with the Ensembl gene IDs and their corresponding Ensembl
#'         gene ID versions.
#'
#' @examples
#' ensembl_id <- c("ENSG00000203782", "ENSG00000008710")
#' gene_id_version_from_ensembl(ensembl_id, reference = "hg19")
#'
#' @export
gene_id_version_from_ensembl <- function(ensembl_id, reference = "hg19") {
ensembl_id_list <- enframe(ensembl_id, name = NULL, value = "ensembl_gene_id")
# Define mart
if (reference == "hg19") {
mart <- useMart("ensembl", dataset = "hsapiens_gene_ensembl", host = "grch37.ensembl.org")
} else {
mart <- useMart("ensembl", dataset = "hsapiens_gene_ensembl", host = "ensembl.org")
}
# Define the attributes and filters
attributes <- c("ensembl_gene_id", "ensembl_gene_id_version")
filters <- "ensembl_gene_id"
# Retrieve the data
gene_id_version <- getBM(attributes = attributes, filters = filters,
values = ensembl_id_list$ensembl_gene_id, mart = mart)
# Join the data back to the input list to ensure all input IDs are in the output
ensembl_id_list_return <- ensembl_id_list %>%
left_join(gene_id_version, by = "ensembl_gene_id")
return(ensembl_id_list_return)
}
gene_id_version_from_ensembl(ensembl_id, reference = "hg19")
searchAttributes(mart = mart, pattern = "hgnc")
searchAttributes(mart = mart, pattern = "gencode")
searchAttributes(mart = mart, pattern = "gencod")
get_multiple_median_tissue_expression(c("ENSG00000008710.19", "ENSG00000118762.7"))
require(httr)
require(jsonlite)
require(tidyverse)
require(purrr)
require(dplyr)
require(janitor)
get_multiple_median_tissue_expression("ENSG00000008710.19")
?URLdecode
## load libraries
library(rmarkdown)
library(config)
project_topic <- "berntpopp"
project_name <- "website"
script_path <- "/"
## read configs
config_vars_proj <- config::get(file = Sys.getenv("CONFIG_FILE"),
config = project_topic)
## set working directory
setwd(paste0(config_vars_proj$projectsdir, project_name, script_path))
# render the website
rmarkdown::render_site()
## load libraries
library(rmarkdown)
library(config)
project_topic <- "berntpopp"
project_name <- "website"
script_path <- "/"
## read configs
config_vars_proj <- config::get(file = Sys.getenv("CONFIG_FILE"),
config = project_topic)
## set working directory
setwd(paste0(config_vars_proj$projectsdir, project_name, script_path))
# render the website
rmarkdown::render_site()
?v
?bibliography_entries
## load libraries
library(rmarkdown)
library(config)
project_topic <- "berntpopp"
project_name <- "website"
script_path <- "/"
## read configs
config_vars_proj <- config::get(file = Sys.getenv("CONFIG_FILE"),
config = project_topic)
## set working directory
setwd(paste0(config_vars_proj$projectsdir, project_name, script_path))
# render the website
rmarkdown::render_site()
## load libraries
library(rmarkdown)
library(config)
project_topic <- "berntpopp"
project_name <- "website"
script_path <- "/"
## read configs
config_vars_proj <- config::get(file = Sys.getenv("CONFIG_FILE"),
config = project_topic)
## set working directory
setwd(paste0(config_vars_proj$projectsdir, project_name, script_path))
# render the website
rmarkdown::render_site()
## load libraries
library(rmarkdown)
library(config)
project_topic <- "berntpopp"
project_name <- "website"
script_path <- "/"
## read configs
config_vars_proj <- config::get(file = Sys.getenv("CONFIG_FILE"),
config = project_topic)
## set working directory
setwd(paste0(config_vars_proj$projectsdir, project_name, script_path))
# render the website
rmarkdown::render_site()
## load libraries
library(rmarkdown)
library(config)
project_topic <- "berntpopp"
project_name <- "website"
script_path <- "/"
## read configs
config_vars_proj <- config::get(file = Sys.getenv("CONFIG_FILE"),
config = project_topic)
## set working directory
setwd(paste0(config_vars_proj$projectsdir, project_name, script_path))
# render the website
rmarkdown::render_site()
## load libraries
library(rmarkdown)
library(config)
project_topic <- "berntpopp"
project_name <- "website"
script_path <- "/"
## read configs
config_vars_proj <- config::get(file = Sys.getenv("CONFIG_FILE"),
config = project_topic)
## set working directory
setwd(paste0(config_vars_proj$projectsdir, project_name, script_path))
# render the website
rmarkdown::render_site()
## load libraries
library(rmarkdown)
library(config)
project_topic <- "berntpopp"
project_name <- "website"
script_path <- "/"
## read configs
config_vars_proj <- config::get(file = Sys.getenv("CONFIG_FILE"),
config = project_topic)
## set working directory
setwd(paste0(config_vars_proj$projectsdir, project_name, script_path))
# render the website
rmarkdown::render_site()
## load libraries
library(rmarkdown)
library(config)
project_topic <- "berntpopp"
project_name <- "website"
script_path <- "/"
## read configs
config_vars_proj <- config::get(file = Sys.getenv("CONFIG_FILE"),
config = project_topic)
## set working directory
setwd(paste0(config_vars_proj$projectsdir, project_name, script_path))
# render the website
rmarkdown::render_site()
## load libraries
library(rmarkdown)
library(config)
project_topic <- "berntpopp"
project_name <- "website"
script_path <- "/"
## read configs
config_vars_proj <- config::get(file = Sys.getenv("CONFIG_FILE"),
config = project_topic)
## set working directory
setwd(paste0(config_vars_proj$projectsdir, project_name, script_path))
# render the website
rmarkdown::render_site()
## load libraries
library(rmarkdown)
library(config)
project_topic <- "berntpopp"
project_name <- "website"
script_path <- "/"
## read configs
config_vars_proj <- config::get(file = Sys.getenv("CONFIG_FILE"),
config = project_topic)
## set working directory
setwd(paste0(config_vars_proj$projectsdir, project_name, script_path))
# render the website
rmarkdown::render_site()
## load libraries
library(rmarkdown)
library(config)
project_topic <- "berntpopp"
project_name <- "website"
script_path <- "/"
## read configs
config_vars_proj <- config::get(file = Sys.getenv("CONFIG_FILE"),
config = project_topic)
## set working directory
setwd(paste0(config_vars_proj$projectsdir, project_name, script_path))
# render the website
rmarkdown::render_site()
## load libraries
library(rmarkdown)
library(config)
project_topic <- "berntpopp"
project_name <- "website"
script_path <- "/"
## read configs
config_vars_proj <- config::get(file = Sys.getenv("CONFIG_FILE"),
config = project_topic)
## set working directory
setwd(paste0(config_vars_proj$projectsdir, project_name, script_path))
# render the website
rmarkdown::render_site()
